{"version":3,"file":"visible-range.js","sources":["../../src/plugins/visible-range/index.js"],"sourcesContent":["import { AbstractPlugin, utils, CONSTANTS, Animation } from 'photo-sphere-viewer';\nimport * as THREE from 'three';\n\n/**\n * @typedef {Object} PSV.plugins.VisibleRangePlugin.Options\n * @property {double[]|string[]} [latitudeRange] - latitude range as two angles\n * @property {double[]|string[]} [longitudeRange] - longitude range as two angles\n * @property {boolean} [usePanoData] - use panoData as visible range, you can also manually call `setRangesFromPanoData`\n */\n\n/**\n * @summary Locks visible longitude and/or latitude\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport default class VisibleRangePlugin extends AbstractPlugin {\n\n  static id = 'visible-range';\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.VisibleRangePlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.plugins.VisibleRangePlugin.Options}\n     * @private\n     */\n    this.config = {\n      latitudeRange : null,\n      longitudeRange: null,\n      usePanoData: false,\n    };\n\n    if (options) {\n      this.config.usePanoData = !!options.usePanoData;\n      this.setLatitudeRange(options.latitudeRange);\n      this.setLongitudeRange(options.longitudeRange);\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  // eslint-disable-next-line consistent-return\n  handleEvent(e) {\n    if (e.type === CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION) {\n      const { rangedPosition } = this.applyRanges(e.value);\n      return rangedPosition;\n    }\n    else if (e.type === CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION) {\n      const { rangedPosition, sidesReached } = this.applyRanges(e.value);\n\n      if (utils.intersect(['left', 'right'], sidesReached).length > 0 && this.psv.isAutorotateEnabled()) {\n        this.__reverseAutorotate();\n        return e.value;\n      }\n\n      return rangedPosition;\n    }\n    else if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\n      if (this.config.usePanoData) {\n        this.setRangesFromPanoData();\n      }\n    }\n  }\n\n  /**\n   * @summary Changes the latitude range\n   * @param {double[]|string[]} range - latitude range as two angles\n   */\n  setLatitudeRange(range) {\n    // latitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('latitude range must have exactly two elements');\n      // eslint-disable-next-line no-param-reassign\n      range = null;\n    }\n    // latitude range must be ordered\n    else if (range && range[0] > range[1]) {\n      utils.logWarn('latitude range values must be ordered');\n      // eslint-disable-next-line no-param-reassign\n      range = [range[1], range[0]];\n    }\n    // latitude range is between -PI/2 and PI/2\n    if (range) {\n      this.config.latitudeRange = range.map(angle => utils.parseAngle(angle, true));\n    }\n    else {\n      this.config.latitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the longitude range\n   * @param {double[]|string[]} range - longitude range as two angles\n   */\n  setLongitudeRange(range) {\n    // longitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('longitude range must have exactly two elements');\n      // eslint-disable-next-line no-param-reassign\n      range = null;\n    }\n    // longitude range is between 0 and 2*PI\n    if (range) {\n      this.config.longitudeRange = range.map(angle => utils.parseAngle(angle));\n    }\n    else {\n      this.config.longitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the latitude and longitude ranges according the current panorama cropping data\n   */\n  setRangesFromPanoData() {\n    this.setLatitudeRange(this.getPanoLatitudeRange());\n    this.setLongitudeRange(this.getPanoLongitudeRange());\n  }\n\n  /**\n   * @summary Gets the latitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLatitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedHeight === p.fullHeight && p.croppedY === 0) {\n      return null;\n    }\n    else {\n      const latitude = y => Math.PI * (1 - y / p.fullHeight) - (Math.PI / 2);\n      return [latitude(p.croppedY), latitude(p.croppedY + p.croppedHeight)];\n    }\n  }\n\n  /**\n   * @summary Gets the longitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLongitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedWidth === p.fullWidth && p.croppedX === 0) {\n      return null;\n    }\n    else {\n      const longitude = x => 2 * Math.PI * (x / p.fullWidth) - Math.PI;\n      return [longitude(p.croppedX), longitude(p.croppedX + p.croppedWidth)];\n    }\n  }\n\n  /**\n   * @summary Apply \"longitudeRange\" and \"latitudeRange\"\n   * @param {PSV.Position} position\n   * @returns {{rangedPosition: PSV.Position, sidesReached: string[]}}\n   * @private\n   */\n  applyRanges(position) {\n    const rangedPosition = {\n      longitude: position.longitude,\n      latitude : position.latitude,\n    };\n    const sidesReached = [];\n\n    let range;\n    let offset;\n\n    if (this.config.longitudeRange) {\n      range = utils.clone(this.config.longitudeRange);\n      offset = THREE.Math.degToRad(this.psv.prop.hFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset);\n      range[1] = utils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            rangedPosition.longitude = range[0];\n            sidesReached.push('left');\n          }\n          else {\n            rangedPosition.longitude = range[1];\n            sidesReached.push('right');\n          }\n        }\n      }\n      else if (position.longitude < range[0]) {\n        rangedPosition.longitude = range[0];\n        sidesReached.push('left');\n      }\n      else if (position.longitude > range[1]) {\n        rangedPosition.longitude = range[1];\n        sidesReached.push('right');\n      }\n    }\n\n    if (this.config.latitudeRange) {\n      range = utils.clone(this.config.latitudeRange);\n      offset = THREE.Math.degToRad(this.psv.prop.vFov) / 2;\n\n      range[0] = utils.parseAngle(Math.min(range[0] + offset, range[1]), true);\n      range[1] = utils.parseAngle(Math.max(range[1] - offset, range[0]), true);\n\n      if (position.latitude < range[0]) {\n        rangedPosition.latitude = range[0];\n        sidesReached.push('bottom');\n      }\n      else if (position.latitude > range[1]) {\n        rangedPosition.latitude = range[1];\n        sidesReached.push('top');\n      }\n    }\n\n    return { rangedPosition, sidesReached };\n  }\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  __reverseAutorotate() {\n    const newSpeed = -this.psv.config.autorotateSpeed;\n    const range = this.config.longitudeRange;\n    this.config.longitudeRange = null;\n\n    new Animation({\n      properties: {\n        speed: { start: this.psv.config.autorotateSpeed, end: 0 },\n      },\n      duration  : 300,\n      easing    : 'inSine',\n      onTick    : (properties) => {\n        this.psv.config.autorotateSpeed = properties.speed;\n      },\n    })\n      .then(() => new Animation({\n        properties: {\n          speed: { start: 0, end: newSpeed },\n        },\n        duration  : 300,\n        easing    : 'outSine',\n        onTick    : (properties) => {\n          this.psv.config.autorotateSpeed = properties.speed;\n        },\n      }))\n      .then(() => {\n        this.config.longitudeRange = range;\n      });\n  }\n\n}\n"],"names":["VisibleRangePlugin","psv","options","config","latitudeRange","longitudeRange","usePanoData","setLatitudeRange","setLongitudeRange","on","CONSTANTS","EVENTS","PANORAMA_LOADED","CHANGE_EVENTS","GET_ANIMATE_POSITION","GET_ROTATE_POSITION","destroy","off","handleEvent","e","type","applyRanges","value","rangedPosition","sidesReached","utils","intersect","length","isAutorotateEnabled","__reverseAutorotate","setRangesFromPanoData","range","logWarn","map","angle","parseAngle","prop","ready","rotate","getPosition","getPanoLatitudeRange","getPanoLongitudeRange","p","panoData","croppedHeight","fullHeight","croppedY","latitude","y","Math","PI","croppedWidth","fullWidth","croppedX","longitude","x","position","offset","clone","THREE","degToRad","hFov","push","vFov","min","max","newSpeed","autorotateSpeed","Animation","properties","speed","start","end","duration","easing","onTick","then","AbstractPlugin","id"],"mappings":"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"}